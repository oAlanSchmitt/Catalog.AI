import streamlit as st
import google.generativeai as genai
from google.api_core.exceptions import GoogleAPIError  # Import corrected

# --- Configura√ß√£o (oculte a chave API) ---
with open("api_key.txt") as f:
    api_key = f.read().strip()
genai.configure(api_key=api_key)

# --- Configura√ß√£o do modelo ---
generation_config = {"candidate_count": 1, "temperature": 0.7}

# √â altamente recomend√°vel manter os filtros de seguran√ßa ativados!
safety_settings = {
    'HATE': 'BLOCK_NONE',
    'HARASSMENT': 'BLOCK_NONE',
    'SEXUAL' : 'BLOCK_NONE',
    'DANGEROUS' : 'BLOCK_NONE'
}

# Inicializando o modelo
model = genai.GenerativeModel(
    model_name='gemini-1.5-pro-latest',
    generation_config=generation_config,
    safety_settings=safety_settings,
)

# --- Instru√ß√µes do sistema ---

# Instru√ß√£o para identificar o g√™nero
identificar_genero_instruction = """
Voc√™ √© um especialista em filmes, animes e s√©ries.

Sua tarefa √© identificar o g√™nero predominante em uma lista de t√≠tulos.

Responda apenas com o nome do g√™nero.

Por exemplo:

T√≠tulos: The Walking Dead, Guerra Mundial Z, Zumbil√¢ndia
G√™nero: Terror
"""

# Instru√ß√£o para recomendar t√≠tulos
recomendar_instruction = """
Voc√™ √© um assistente especializado em recomendar animes, filmes e s√©ries.

Siga estas regras:

* **Recomenda√ß√µes √∫nicas:** Nunca sugira o mesmo t√≠tulo que o usu√°rio forneceu como entrada.
* **Diversidade:** Recomende um filme, um anime e uma s√©rie, um de cada.
* **Formato da resposta:** Separe as recomenda√ß√µes com "===" e use o seguinte formato para cada recomenda√ß√£o:
    * Tipo: [Filme, Anime ou S√©rie]
    * T√≠tulo: [T√≠tulo]
    * Sinopse: [Breve sinopse]
    * Chances de Voc√™ Gostar: [Alta, M√©dia ou Baixa]

Exemplo:

Informa√ß√£o: The Walking Dead, Guerra Mundial Z, Zumbil√¢ndia, John Wick, Mad Max
Resposta:
===
Tipo: Filme
T√≠tulo: Army of the Dead
Sinopse: Um grupo de mercen√°rios planeja um assalto a um cassino em Las Vegas durante um surto de zumbis.
Chances de Voc√™ Gostar: Alta
===
Tipo: Anime
T√≠tulo: Highschool of the Dead
Sinopse: Um grupo de estudantes precisa lutar para sobreviver a um apocalipse zumbi.
Chances de Voc√™ Gostar: M√©dia
===
Tipo: S√©rie
T√≠tulo: Kingdom
Sinopse: Um pr√≠ncipe coreano precisa enfrentar uma misteriosa praga zumbi que est√° devastando o reino.
Chances de Voc√™ Gostar: Alta
"""

# --- Fun√ß√£o para obter recomenda√ß√µes ---
def obter_recomendacoes(titulos):
    try:
        chat = model.start_chat(history=[]) 
        prompt_genero = f"T√≠tulos: {', '.join(titulos)}\nG√™nero: "
        response_genero = chat.send_message(identificar_genero_instruction + prompt_genero)
        genero = response_genero.text.strip()

        prompt_recomendacoes = f"Informa√ß√£o: {', '.join(titulos)}.\nResposta:\n"
        response_recomendacoes = chat.send_message(recomendar_instruction + prompt_recomendacoes)
        return genero, response_recomendacoes.text.strip()
    except GoogleAPIError as e:
        if e.code == 429: 
            st.error(f"Erro na API do Gemini: {e}. Aguarde alguns instantes e tente novamente.")
        else:
            st.error(f"Erro na API do Gemini: {e}")
        return None, None

# --- Interface do Streamlit ---
st.title("‚ú® CatalogAI: Seu Guia Personalizado para Filmes, Animes e S√©ries ‚ú®")
st.write("Conte-nos seus gostos e o CatalogAI usar√° intelig√™ncia artificial para te recomendar filmes, animes e s√©ries que voc√™ vai amar! ü§ñüçø")
st.write("**Experimente:** Digite 'Stranger Things, Naruto, Your Name' e veja o que o CatalogAI recomenda!")

if "titulos_input" not in st.session_state:
    st.session_state.titulos_input = ""

titulos_input = st.text_area(
    "Insira os t√≠tulos que voc√™ gosta, separados por v√≠rgula:",
    value=st.session_state.titulos_input,
)
titulos = [t.strip() for t in titulos_input.split(",")]

if "recomendacoes" not in st.session_state:
    st.session_state.recomendacoes = None

if "genero" not in st.session_state:  # Inicializa o genero na session state
    st.session_state.genero = None

# Bot√£o condicional
if not st.session_state.recomendacoes:
    if st.button("Obter Recomenda√ß√µes"):
        if all(titulos):
            with st.spinner("Pensando em recomenda√ß√µes incr√≠veis..."):
                st.session_state.genero, recomendacoes_str = obter_recomendacoes(titulos)

            if st.session_state.genero and recomendacoes_str:
                st.session_state.recomendacoes = recomendacoes_str
                st.session_state.botao_visivel = False
        else:
            st.warning("Por favor, insira pelo menos um t√≠tulo.")

# Exibe as recomenda√ß√µes (se houver)
if st.session_state.recomendacoes:
    st.write(
        f"Ah, ent√£o voc√™ curte {st.session_state.genero}! ü§© Saca s√≥ essas recomenda√ß√µes:"
    )
    recomendacoes = st.session_state.recomendacoes.split("===")
    for recomendacao in recomendacoes:
        if recomendacao.strip():
            linhas = recomendacao.strip().split("\n")
            tipo = linhas[0].split(":")[1].strip()
            titulo = linhas[1].split(":")[1].strip()
            sinopse = linhas[2].split(":")[1].strip()
            chances = linhas[3].split(":")[1].strip()

            st.markdown(f"## **{tipo}: {titulo}**")
            st.write(f"_{sinopse}_")
            st.write(f"**Chances de Voc√™ Gostar:** {chances}")

    # Bot√£o para gerar novas sugest√µes
    if st.button("Gerar Novas Sugest√µes"):
        st.session_state.recomendacoes = None  # Limpa as recomenda√ß√µes anteriores
        st.experimental_rerun()  # Recarrega a p√°gina para gerar novas sugest√µes
else:
    st.warning("Por favor, insira pelo menos um t√≠tulo.")